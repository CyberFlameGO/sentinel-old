buildscript {
    ext {
        kotlin_version = '1.2.41'
        bootVersion = '2.0.1.RELEASE'
    }

    repositories {
        mavenCentral()
        maven { url 'http://repo.spring.io/plugins-release' }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$bootVersion"
    }
}

group 'com.fredboat'
version '0.1'

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'kotlin'

sourceCompatibility = 10
targetCompatibility = 10

compileJava.dependsOn 'clean'
compileJava.options.encoding = 'UTF-8'
compileJava.options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()
    jcenter()
}

ext {
    jdaVersion = "3.6.0_354"
    amqpVersion = "2.0.3.RELEASE"
    gsonVersion = '2.8.2'
    jacksonKotlinVersion = "2.9.+"
    logbackVersion = "1.2.3"
}

dependencies {
    compile project(":sentinel-shared")
    compile "net.dv8tion:JDA:$jdaVersion"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    compile "org.springframework.boot:spring-boot-starter-web:$bootVersion"
    compile "org.springframework.amqp:spring-rabbit:$amqpVersion"
    compile "com.google.code.gson:gson:$gsonVersion"
    compile "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonKotlinVersion"
    compile "ch.qos.logback:logback-classic:$logbackVersion"
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

bootRun {
    //compiling tests during bootRun increases the likelyhood of catching broken tests locally instead of on the CI
    dependsOn compileTestJava

    //pass in custom jvm args
    // source: https://stackoverflow.com/a/25079415
    // example: ./gradlew bootRun -PjvmArgs="--illegal-access=debug -Dwhatever=value"
    if (project.hasProperty('jvmArgs')) {
        jvmArgs project.jvmArgs.split('\\s+')
    }
}

bootJar {
    archiveName = "sentinel.jar"
    doLast {
        //copies the jar into a place where the Dockerfile can find it easily (and users maybe too)
        copy {
            from 'build/libs/sentinel.jar'
            into '.'
        }
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.7'
    //noinspection UnnecessaryQualifiedReference
    distributionType = Wrapper.DistributionType.ALL
}

//create a simple version file that we will be reading to create appropriate docker tags
void versionTxt() {
    new File("$projectDir/VERSION.txt").text = "$rootProject.version\n"
}

versionTxt()
